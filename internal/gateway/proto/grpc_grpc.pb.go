// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: internal/gateway/proto/grpc.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCClient is the client API for GRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCClient interface {
	Transport(ctx context.Context, opts ...grpc.CallOption) (GRPC_TransportClient, error)
}

type gRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCClient(cc grpc.ClientConnInterface) GRPCClient {
	return &gRPCClient{cc}
}

func (c *gRPCClient) Transport(ctx context.Context, opts ...grpc.CallOption) (GRPC_TransportClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPC_ServiceDesc.Streams[0], "/gateway.GRPC/Transport", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTransportClient{stream}
	return x, nil
}

type GRPC_TransportClient interface {
	Send(*ClientMsg) error
	Recv() (*ServerMsg, error)
	grpc.ClientStream
}

type gRPCTransportClient struct {
	grpc.ClientStream
}

func (x *gRPCTransportClient) Send(m *ClientMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCTransportClient) Recv() (*ServerMsg, error) {
	m := new(ServerMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCServer is the server API for GRPC service.
// All implementations must embed UnimplementedGRPCServer
// for forward compatibility
type GRPCServer interface {
	Transport(GRPC_TransportServer) error
	mustEmbedUnimplementedGRPCServer()
}

// UnimplementedGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCServer struct {
}

func (UnimplementedGRPCServer) Transport(GRPC_TransportServer) error {
	return status.Errorf(codes.Unimplemented, "method Transport not implemented")
}
func (UnimplementedGRPCServer) mustEmbedUnimplementedGRPCServer() {}

// UnsafeGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCServer will
// result in compilation errors.
type UnsafeGRPCServer interface {
	mustEmbedUnimplementedGRPCServer()
}

func RegisterGRPCServer(s grpc.ServiceRegistrar, srv GRPCServer) {
	s.RegisterService(&GRPC_ServiceDesc, srv)
}

func _GRPC_Transport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCServer).Transport(&gRPCTransportServer{stream})
}

type GRPC_TransportServer interface {
	Send(*ServerMsg) error
	Recv() (*ClientMsg, error)
	grpc.ServerStream
}

type gRPCTransportServer struct {
	grpc.ServerStream
}

func (x *gRPCTransportServer) Send(m *ServerMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCTransportServer) Recv() (*ClientMsg, error) {
	m := new(ClientMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPC_ServiceDesc is the grpc.ServiceDesc for GRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.GRPC",
	HandlerType: (*GRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transport",
			Handler:       _GRPC_Transport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/gateway/proto/grpc.proto",
}
